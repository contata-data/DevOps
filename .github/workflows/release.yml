name: Release

on:
  release:
    types: [created]  # Trigger on release creation

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-functions: ${{ steps.detect.outputs.changed-functions }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Get release details
        id: get_release
        run: |
          # Assuming you want to capture the release tag name
          RELEASE_TAG=$(echo "${{ github.ref }}" | sed -n 's/refs\/tags\/\(.*\)/\1/p')
          echo "Release tag: $RELEASE_TAG"
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV  # Pass this as an environment variable

      - name: Detect changes
        id: detect
        run: |
          CHANGED_FUNCTIONS=$(git diff --name-only origin/main...$RELEASE_TAG | grep -E '\.py$|\.js$' | jq -r '. | {name: basename(. // "-"), SrcFolder: dirname(. // "-")}';)
          # Check if any changes were found
          if [ -z "$CHANGED_FUNCTIONS" ]; then
            echo "changed-functions=[]" >> $GITHUB_ENV
          else
            echo "changed-functions=$CHANGED_FUNCTIONS" >> $GITHUB_ENV
          fi

  deploy-production:
    needs: detect-changes
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      id-token: write

    strategy:
      matrix:
        function: ${{ fromJson(needs.detect-changes.outputs.changed-functions) }}

    steps:
      - uses: actions/checkout@v4

      # Add your authentication and setup steps as needed

      - name: Deploy Cloud Function
        if: matrix.function.Trigger == 'HTTP'  # Example condition, adjust as per your needs
        uses: google-github-actions/deploy-cloud-functions@v3
        with:
          name: ${{ matrix.function.name }}
          runtime: "python312"
          project_id: "relevate-dev-403605"
          entry_point: ${{ matrix.function.entry_point }}
          timeout: "10m"
          source_dir: "src/${{ matrix.function.SrcFolder }}"

  commitwrite:
    needs: detect-changes 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Git identity
        run: |
          git config --global user.email "vikask@contata.in"
          git config --global user.name "Vikas Kumar"

      - name: Get last commit details
        id: last_commit_write
        run: |
          LAST_COMMIT_WRITE=$(git rev-parse HEAD)
          echo "$LAST_COMMIT_WRITE" > ${{ github.workspace }}/Icf.txt
          echo "Last commit hash: $LAST_COMMIT_WRITE"

      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Automated commit by CI/CD"
          git push origin main

  committriggerwrite:
    needs: [deploy-production, detect-changes]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function: ${{ fromJson(needs.detect-changes.outputs.changed-functions) }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Git identity
        run: |
          git config --global user.email "vikask@contata.in"
          git config --global user.name "Vikas Kumar"

      - name: Write trigger
        id: Trigger_write
        run: |
          echo "Trigger Created for ${{ matrix.function.name }}" >> ${{ github.workspace }}/src/${{ matrix.function.SrcFolder }}/Trigger.txt

      - name: Commit and push changes
        run: |
          git add ${{ github.workspace }}/src/${{ matrix.function.SrcFolder }}/Trigger.txt
          if [[ $(git status --porcelain) ]]; then
            git commit -m "Automated: Trigger created for function ${{ matrix.function.name }}"
            git push origin main
          else
            echo "No changes detected. Skipping commit and push."
          fi
