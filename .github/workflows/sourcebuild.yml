name: CI/CD
on:
  push:
    branches:
      - main
    paths:
      - "src/**"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-functions: ${{ steps.detect.outputs.changed-functions }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and  tags

      - name: get last commit details
        id: last_commit
        run: |
          LAST_COMMIT=$(cat ${{ github.workspace }}/Icf.txt)
          echo "last commit: $LAST_COMMIT"
          echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_OUTPUT

      - name: Get Last Merge Commit
        id: last_merge
        run: |
          LAST_MERGE=$(git log main --merges -1 --format=%H)
          echo "Last merge commit : $LAST_MERGE"
          echo "LAST_MERGE=$LAST_MERGE" >> $GITHUB_OUTPUT

      - name: Debug skip file content
        id: skip_file_list
        run: |
           echo "Skip file contents:"
           cat "${{ github.workspace }}/SkipFolderslist.txt"

      - name: Get Previous Merge Commit
        id: prev_merge
        run: |
          PREV_MERGE=$(git log main --merges -2 --format=%H | tail -n 1)
          echo "Previous merge commit: $PREV_MERGE"
          echo "PREV_MERGE=$PREV_MERGE" >> $GITHUB_OUTPUT

      - id: detect
        run: |
          CHANGED_FUNCTIONS=()
          git fetch origin main
          echo "Previous merge commit: ${{ steps.prev_merge.outputs.PREV_MERGE }}"
          echo "Last merge commit: ${{ steps.last_merge.outputs.LAST_MERGE }}"
          echo "Last commit: ${{ steps.last_commit.outputs.LAST_COMMIT }}"
          CHANGED_FILES=$(git diff --name-only ${{ steps.last_commit.outputs.LAST_COMMIT }} main)
          CHANGED_DIRS=$(for file in $CHANGED_FILES; do dirname "$file"; done | grep '^src/' | sort | uniq)
          echo "Directories: $CHANGED_DIRS"
          SKIP_LIST_FILE="${{ github.workspace }}/SkipFolderslist.txt"
          #### ✅ Normalize skip list (slashes and trailing slashes)
          echo "Normalizing skip list..."
          SKIP_FOLDERS=$(sed 's|\\|/|g; s|/$||' "$SKIP_LIST_FILE")
          echo "Normalized skip list:"
          echo "$SKIP_FOLDERS"
          echo ""
          echo "Changed dirs after filtering:"
          for DIR in $CHANGED_DIRS; do
            CLEAN_DIR=$(echo "$DIR" | sed 's|\\|/|g; s|/$||')
            echo "Checking DIR: '$CLEAN_DIR'"
            if echo "$SKIP_FOLDERS" | grep -Fxq "$CLEAN_DIR"; then
              echo "⏭️ Skipping $CLEAN_DIR (matched in skip list)"
              continue
            fi
            echo "✅ Including $CLEAN_DIR"
            FUNCTION_NAME=$(basename "$CLEAN_DIR")
            IFS='_' read -r part1 part2 part3 <<< "$FUNCTION_NAME"
            part1=${part1:-"UnknownTrigger"}
            part2=${part2:-"UnknownFunction"}
            part3=${part3:-"UnknownType"}
            CHANGED_FUNCTIONS+=("{\"name\": \"$part2\", \"entry_point\": \"$part2\", \"TriggerName\": \"$part1\", \"Trigger\": \"$part3\", \"SrcFolder\": \"$FUNCTION_NAME\"}")
          done
          if [ ${#CHANGED_FUNCTIONS[@]} -eq 0 ]; then
            echo "changed-functions=[]" >> $GITHUB_OUTPUT
          else
            CHANGED_FUNCTIONS_JSON=$(printf '[%s]' "$(IFS=,; echo "${CHANGED_FUNCTIONS[*]}")")
            echo "changed-functions=$CHANGED_FUNCTIONS_JSON" >> $GITHUB_OUTPUT
          fi
          
      #- id: detect
      #  run: |
      #    CHANGED_FUNCTIONS=()
      #    git fetch origin main
      #    # get changed files
      #    echo "Previous merge commit: ${{ steps.prev_merge.outputs.PREV_MERGE }}"
      #    echo "Last merge commit: ${{ steps.last_merge.outputs.LAST_MERGE }}"
      #    echo "Last commit: ${{ steps.last_commit.outputs.LAST_COMMIT }}"
      #    CHANGED_FILES=$(git diff --name-only ${{ steps.last_commit.outputs.LAST_COMMIT }} main)
      #    #get changed dirs
      #    CHANGED_DIRS=$(for file in $CHANGED_FILES; do dirname $file; done | grep '^src/' | sort | uniq)
      #    echo "Directories: $CHANGED_DIRS"
      #    SKIP_LIST_FILE="${{ github.workspace }}/SkipFolderslist.txt"
      #    
      #    #### ✅ HIGHLIGHTED: Normalize the skip file content ####
      #    echo "Normalizing skip list (slashes and trailing slashes)..."
      #    sed -i 's|\\|/|g' "$SKIP_LIST_FILE"
      #    sed -i 's|/$||' "$SKIP_LIST_FILE"
      #    
      #    echo "Normalized Skip List:"
      #    cat "$SKIP_LIST_FILE"
      #    echo ""
      #    
      #    
      #    echo "All changed dirs:"
      #    for d in $CHANGED_DIRS; do
      #    echo "'$d'"
      #    done
      #    
      #    for DIR in $CHANGED_DIRS; do
      #    CLEAN_DIR=$(echo "$DIR" | sed 's|/$||')
      #    CLEAN_DIR=$(echo "$CLEAN_DIR" | sed 's|\\|/|g')
      #    echo "Checking DIR: '$CLEAN_DIR'"
      #    
      #    if grep -Fqx "$CLEAN_DIR" "$SKIP_LIST_FILE"; then
      #        echo " Skipping $CLEAN_DIR"
      #        continue
      #    fi
      #    
      #    echo " Including $CLEAN_DIR"
      #    FUNCTION_NAME=$(basename "$CLEAN_DIR")
      #    IFS='_' read -r part1 part2 part3 <<< "$FUNCTION_NAME"
      #    CHANGED_FUNCTIONS+=("{\"name\": \"$part2\", \"entry_point\": \"$part2\", \"TriggerName\": \"$part1\", \"Trigger\": \"$part3\", \"SrcFolder\": \"$FUNCTION_NAME\"}")
      #    done
      #    
      #    # today 03-07-2025
      #    #SKIP_LIST_FILE="${{ github.workspace }}/SkipDeployFolders.txt"
      #    #for DIR in $CHANGED_DIRS; do
      #    #    if grep -Fxq "$DIR" "$SKIP_LIST_FILE"; then
      #    #      echo "Skipping deployment for: $DIR"
      #    #      continue
      #    #    fi
      #    #    echo " Deploying: $DIR"
      #    #    FUNCTION_NAME=$(basename "$DIR")
      #    #    IFS='_' read -r part1 part2 part3 <<< "$FUNCTION_NAME"
      #    #    ENTRY_POINT="${FUNCTION_NAME}"
      #    #    CHANGED_FUNCTIONS+=("{\"name\": \"$part2\", \"entry_point\": \"$part2\", \"TriggerName\": \"$part1\", \"Trigger\": \"$part3\",\"SrcFolder\": \"$FUNCTION_NAME\"}")
      #    #done
      #    #if [ ${#CHANGED_FUNCTIONS[@]} -eq 0 ]; then
      #    #  echo "changed-functions=[]" >> $GITHUB_OUTPUT
      #    #else
      #    #  CHANGED_FUNCTIONS_JSON=$(printf '[%s]' "$(IFS=,; echo "${CHANGED_FUNCTIONS[*]}")")
      #    #  echo "changed-functions=$CHANGED_FUNCTIONS_JSON" >> $GITHUB_OUTPUT
      #    #fi
      #
      #    #for DIR in $CHANGED_DIRS; do
      #    #    if [ "$DIR" = ".github" ] || [ "$DIR" = ".github/workflows" ]; then
      #    #      continue
      #    #    fi
      #    #    echo "Directory name: $DIR"
      #    #    FUNCTION_NAME=$(basename $DIR)
      #    #    echo "function name: $FUNCTION_NAME"
      #    #    # Split function name into parts
      #    #    IFS='_' read -r part1 part2 part3 <<< "$FUNCTION_NAME"
      #    #    echo "TriggerName: $part1"
      #    #    echo "FunName: $part2"
      #    #    echo "Trigger: $part3"
      #    #    # Assuming entry point can be derived from function name
      #    #    ENTRY_POINT="${FUNCTION_NAME}"
      #    #    CHANGED_FUNCTIONS+=("{\"name\": \"$part2\", \"entry_point\": \"$part2\", \"TriggerName\": \"$part1\", \"Trigger\": \"$part3\",\"SrcFolder\": \"$FUNCTION_NAME\"}")
      #    #done
      #    #if [ ${#CHANGED_FUNCTIONS[@]} -eq 0 ]; then
      #    #  echo "changed-functions=[]" >> $GITHUB_OUTPUT
      #    #else
      #    #  CHANGED_FUNCTIONS_JSON=$(printf '[%s]' "$(IFS=,; echo "${CHANGED_FUNCTIONS[*]}")")
      #    #  echo "changed-functions=$CHANGED_FUNCTIONS_JSON" >> $GITHUB_OUTPUT
      #    #fi
  deploy-staging:
    needs: detect-changes
    runs-on: ubuntu-latest
    environment: stag
    permissions:
      contents: read
      id-token: write

    strategy:
      matrix:
        function: ${{ fromJson(needs.detect-changes.outputs.changed-functions) }}

    steps:
      - uses: actions/checkout@v4

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{vars.WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{vars.SERVICE_ACCOUNT}}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECTID }}

      - name: Create Bucket
        if: matrix.function.Trigger == 'Storage'
        id: check_bucket
        run: |
          BUCKET_NAME="${{ matrix.function.TriggerName }}"
          PROJECT_Ids="${{ vars.PROJECTID }}"
          BUCKET_FULL_NAME="${PROJECT_Ids}-${BUCKET_NAME}"
          echo "BUCKET_FULL_NAME=$BUCKET_FULL_NAME" >> $GITHUB_OUTPUT
          echo "BUCKET_FULL_NAME : $BUCKET_FULL_NAME"
          ## Check bucket existence with exit  code handling
          #TRIGGER_DETAILS=$(cat ${{ github.workspace }}/src/${{ matrix.function.SrcFolder }}/Trigger.txt)
          #echo "trigger  details: $TRIGGER_DETAILS" 
          #echo "TRIGGER_DETAILS=$TRIGGER_DETAILS" >> $GITHUB_OUTPUT
          #if [ "${TRIGGER_DETAILS}" = "" ]; then
          #  echo "Bucket $BUCKET_FULL_NAME does not exists"
          #  echo "Creating bucket $BUCKET_FULL_NAME"
          #  gcloud storage buckets  create gs://$BUCKET_FULL_NAME \
          #      --project relevate-dev-403605 \
          #      --location us-central1
          #else
          #  echo "Bucket $BUCKET_FULL_NAME already exists "
          #fi
          
          if gsutil ls -b "gs://${BUCKET_FULL_NAME}"; then
            echo "Bucket - ${BUCKET_FULL_NAME} exists.line 124"
          else
            echo "Bucket $BUCKET_FULL_NAME does not exists line 126 "
            echo "Creating bucket - $BUCKET_FULL_NAME"
            gcloud storage buckets create gs://${BUCKET_FULL_NAME} \
                --project ${{ vars.PROJECTID }} \
                --location us-central1
          fi

      - name: Create Topic in Parallel
        if: matrix.function.Trigger == 'PubSub'
        id: create_topic
        run: |
          set -e  # Stop on errors
          trap 'echo "Error occurred while creating Pub/Sub topic: $TOPIC_NAME"' ERR  # Catch errors
          TOPIC_NAME=${{ matrix.function.TriggerName }}
          # Check if topic already exists
          if ! gcloud pubsub topics list --filter="name:projects/${{ vars.PROJECTID }}/topics/$TOPIC_NAME" | grep "$TOPIC_NAME"; then
            echo "Creating Pub/Sub topic: $TOPIC_NAME"
            # Attempt to create topic, ignore if already created by another process
            gcloud pubsub topics create $TOPIC_NAME || {
              # Check if the failure was because the topic already exists
              if gcloud pubsub topics list --filter="name:projects/${{ vars.PROJECTID }}/topics/$TOPIC_NAME" | grep "$TOPIC_NAME"; then
                echo "Topic: $TOPIC_NAME was already created by another process."
              else
                echo "Failed to create topic: $TOPIC_NAME due to unexpected error."
                exit 1
              fi
            }
          else
            echo "Topic: $TOPIC_NAME already exists, skipping creation."
          fi

     
      # name: Parse Cloud Function Storage Details
      # id: parse_cf_storage
      # run: |
      #   FILE="${{ github.workspace }}/src/${{ matrix.function.SrcFolder }}/config.txt"
      #   MEMORY=$(grep '^memory:' $FILE | cut -d':' -f2 | xargs)
      #   TIMEOUT=$(grep '^timeout:' $FILE | cut -d':' -f2 | xargs)
      #   RUNTIME=$(grep '^runtime:' $FILE | cut -d':' -f2 | xargs)
      #   ENDPOINT=$(grep '^endpoint:' $FILE | cut -d':' -f2 | xargs)
      #   CFNAME=$(grep '^cfname:' $FILE | cut -d':' -f2 | xargs)
      #   echo "Memory: $MEMORY"
      #   echo "Timeout: $TIMEOUT"
      #   echo "Runtime: $RUNTIME"
      #   # Check and assign default values if variables are empty
      #   if [ -z "$MEMORY" ]; then
      #   MEMORY="256Mi"
      #   fi
      #   if [ -z "$TIMEOUT" ]; then
      #   TIMEOUT="8m"
      #   fi
      #   if [ -z "$RUNTIME" ]; then
      #   RUNTIME="python312"
      #   fi
      #   if [ -z "$ENDPOINT" ]; then
      #   ENDPOINT="${{ matrix.function.name }}"
      #   fi
      #   if [ -z "$CFNAME" ]; then
      #   CFNAME="${{ matrix.function.name }}"
      #   fi
      #   echo "Using Function Name: $${{ matrix.function.name }}"
      #   echo "Using Entry point: $${{ matrix.function.name }}"
      #   
      #   echo "Using Memory: $MEMORY"
      #   echo "Using Timeout: $TIMEOUT"
      #   echo "Using RUNTIME: $RUNTIME"
      #   
      #   echo "MEMORY=$MEMORY" >> $GITHUB_OUTPUT
      #   echo "TIMEOUT=$TIMEOUT" >> $GITHUB_OUTPUT
      #   echo "RUNTIME=$RUNTIME" >> $GITHUB_OUTPUT
      #   echo "ENDPOINT=$ENDPOINT" >> $GITHUB_OUTPUT
      #   echo "CFNAME=$CFNAME" >> $GITHUB_OUTPUT

      - name: Parse Cloud Function Config (JSON)
        id: parse_cf_storage
        run: |
             CONFIG_JSON="src/${{ matrix.function.SrcFolder }}/config.json"
             CONFIG_TXT="src/${{ matrix.function.SrcFolder }}/config.txt"
             
             if [[ -f "$CONFIG_JSON" ]]; then
                 echo "Using JSON config"
                 MEMORY=$(jq -r '.memory // empty' "$CONFIG_JSON")
                 TIMEOUT=$(jq -r '.timeout // empty' "$CONFIG_JSON")
                 RUNTIME=$(jq -r '.runtime // empty' "$CONFIG_JSON")
                 ENDPOINT=$(jq -r '.endpoint // empty' "$CONFIG_JSON")
                 CFNAME=$(jq -r '.cfname // empty' "$CONFIG_JSON")
                 MIN_INSTANCE=$(jq -r '.min_instance // empty' "$CONFIG_JSON")
                 MAX_INSTANCE=$(jq -r '.max_instance // empty' "$CONFIG_JSON")
                 CONCURRENCY=$(jq -r '.concurrency // empty' "$CONFIG_JSON")
             
             elif [[ -f "$CONFIG_TXT" ]]; then
                 echo "Using TXT config"
                 MEMORY=$(grep '^memory:' "$CONFIG_TXT" | cut -d':' -f2 | xargs)
                 TIMEOUT=$(grep '^timeout:' "$CONFIG_TXT" | cut -d':' -f2 | xargs)
                 RUNTIME=$(grep '^runtime:' "$CONFIG_TXT" | cut -d':' -f2 | xargs)
                 ENDPOINT=$(grep '^endpoint:' "$CONFIG_TXT" | cut -d':' -f2 | xargs)
                 CFNAME=$(grep '^cfname:' "$CONFIG_TXT" | cut -d':' -f2 | xargs)
                 # These are not set in TXT, so use defaults
                 MIN_INSTANCE=""
                 MAX_INSTANCE=""
                 CONCURRENCY=""
             else
                 echo "No config file found!"
                 exit 1
             fi
             
             # Set default values if not defined
             MEMORY=${MEMORY:-"512Mi"}
             TIMEOUT=${TIMEOUT:-"8m"}
             RUNTIME=${RUNTIME:-"python312"}
             ENDPOINT=${ENDPOINT:-"${{ matrix.function.name }}"}
             CFNAME=${CFNAME:-"${{ matrix.function.name }}"}
             MIN_INSTANCE=${MIN_INSTANCE:-1}
             MAX_INSTANCE=${MAX_INSTANCE:-3}
             CONCURRENCY=${CONCURRENCY:-3}
             
             # Output to GitHub Actions
             echo "MEMORY=$MEMORY" >> $GITHUB_OUTPUT
             echo "TIMEOUT=$TIMEOUT" >> $GITHUB_OUTPUT
             echo "RUNTIME=$RUNTIME" >> $GITHUB_OUTPUT
             echo "ENDPOINT=$ENDPOINT" >> $GITHUB_OUTPUT
             echo "CFNAME=$CFNAME" >> $GITHUB_OUTPUT
             echo "MIN_INSTANCE=$MIN_INSTANCE" >> $GITHUB_OUTPUT
             echo "MAX_INSTANCE=$MAX_INSTANCE" >> $GITHUB_OUTPUT
             echo "CONCURRENCY=$CONCURRENCY" >> $GITHUB_OUTPUT

            ##CONFIG_FILE="${{ github.workspace }}/src/${{ matrix.function.SrcFolder }}/config.json"
            ### Check if the config file exists
            ##if [ ! -f "$CONFIG_FILE" ]; then
            ##echo "Config file $CONFIG_FILE not found!"
            ##exit 1
            ##fi
            ### Parse JSON and assign defaults if keys are missing
            ##MEMORY=$(jq -r '.memory // "256Mi"' "$CONFIG_FILE")
            ##TIMEOUT=$(jq -r '.timeout // "8m"' "$CONFIG_FILE")
            ##RUNTIME=$(jq -r '.runtime // "python312"' "$CONFIG_FILE")
            ##ENDPOINT=$(jq -r '.endpoint // "${{ matrix.function.name }}"' "$CONFIG_FILE")
            ##CFNAME=$(jq -r '.cfname // "${{ matrix.function.name }}"' "$CONFIG_FILE")
            ##MIN_INSTANCE=$(jq -r '.min_instance // 1' "$CONFIG_FILE")
            ##MAX_INSTANCE=$(jq -r '.max_instance // 3' "$CONFIG_FILE")
            ##CONCURRENCY=$(jq -r '.concurrency // 3' "$CONFIG_FILE")
            ##
            ##echo "Parsed Config - Memory: $MEMORY, Timeout: $TIMEOUT, Runtime: $RUNTIME, Endpoint: $ENDPOINT, CFName: $CFNAME"
            ### Set outputs
            ##echo "MEMORY=$MEMORY" >> $GITHUB_OUTPUT
            ##echo "TIMEOUT=$TIMEOUT" >> $GITHUB_OUTPUT
            ##echo "RUNTIME=$RUNTIME" >> $GITHUB_OUTPUT
            ##echo "ENDPOINT=$ENDPOINT" >> $GITHUB_OUTPUT
            ##echo "CFNAME=$CFNAME" >> $GITHUB_OUTPUT
            ##echo "MIN_INSTANCE=$MIN_INSTANCE" >> $GITHUB_OUTPUT
            ##echo "MAX_INSTANCE=$MAX_INSTANCE" >> $GITHUB_OUTPUT
            ##echo "CONCURRENCY=$CONCURRENCY" >> $GITHUB_OUTPUT
      - name: Debug Parsed Outputs
        run: |
                echo " RUNTIME: ${{ steps.parse_cf_storage.outputs.RUNTIME }}"
                echo "MEMORY: ${{ steps.parse_cf_storage.outputs.MEMORY }}"
                echo "Timeout1: ${{ steps.parse_cf_storage.outputs.TIMEOUT }}"
                echo "ENDPOINT: ${{ steps.parse_cf_storage.outputs.ENDPOINT }}"
                echo "CFNAME: ${{ steps.parse_cf_storage.outputs.CFNAME }}"
                echo "MIN_INSTANCE: ${{ steps.parse_cf_storage.outputs.MIN_INSTANCE }}"
                echo "MAX_INSTANCE: ${{ steps.parse_cf_storage.outputs.MAX_INSTANCE }}"
                echo "CONCURRENCY: ${{ steps.parse_cf_storage.outputs.CONCURRENCY }}"

          
      - name: Deploy Cloud Function - Topic Trigger
        if: matrix.function.Trigger == 'PubSub'  
        uses: google-github-actions/deploy-cloud-functions@v3
        with:
          name: ${{ steps.parse_cf_storage.outputs.CFNAME }}
          runtime: ${{ steps.parse_cf_storage.outputs.RUNTIME }}
          project_id: ${{ env.PROJECTID }}
          entry_point: ${{ steps.parse_cf_storage.outputs.ENDPOINT }}
          event_trigger_type: "google.cloud.pubsub.topic.v1.messagePublished"
          event_trigger_resource: "projects/${{ vars.PROJECTID }}/topics/${{ matrix.function.TriggerName }}"
          event_trigger_pubsub_topic: "projects/${{ vars.PROJECTID }}/topics/${{ matrix.function.TriggerName }}"
          event_trigger_service: "pubsub.googleapis.com"
          timeout: ${{ steps.parse_cf_storage.outputs.TIMEOUT }}
          service_timeout: ${{ steps.parse_cf_storage.outputs.TIMEOUT }}
          source_dir: "src/${{ matrix.function.SrcFolder }}"
          ingress_settings: "ALLOW_ALL"  # Allow traffic from all sources
          allow_unauthenticated: true  
          memory: ${{ steps.parse_cf_storage.outputs.MEMORY }}
          environment: "GEN_2"
          retry: false
          event_trigger_retry: false
 
      - name: Deploy Cloud Function - Storage Trigger
        if: matrix.function.Trigger == 'Storage'  
        uses: google-github-actions/deploy-cloud-functions@v3
        with:
          name: ${{ steps.parse_cf_storage.outputs.CFNAME }}
          runtime: ${{ steps.parse_cf_storage.outputs.RUNTIME }}
          project_id: ${{ env.PROJECTID }}
          entry_point: ${{ steps.parse_cf_storage.outputs.ENDPOINT }}
          event_trigger_type: "google.cloud.storage.object.v1.finalized"
          event_trigger_resource: "projects/${{ vars.PROJECTID }}/locations/us-central1/buckets/${{ steps.check_bucket.outputs.BUCKET_FULL_NAME }}"
          event_trigger_filters: |
             bucket=${{ steps.check_bucket.outputs.BUCKET_FULL_NAME }}
          timeout: ${{ steps.parse_cf_storage.outputs.TIMEOUT }}
          service_timeout: ${{ steps.parse_cf_storage.outputs.TIMEOUT }}
          source_dir: "src/${{ matrix.function.SrcFolder }}"
          ingress_settings: "ALLOW_ALL"  # Allow traffic from all sources 
          allow_unauthenticated: true  
          memory: ${{ steps.parse_cf_storage.outputs.MEMORY }}
          environment: "GEN_2"
          retry: false 
          event_trigger_retry: false

      - name: Deploy Cloud Function - HTTP Trigger
        if: matrix.function.Trigger == 'HTTP'  
        uses: google-github-actions/deploy-cloud-functions@v3
        with:
          name: ${{ steps.parse_cf_storage.outputs.CFNAME }}
          runtime: ${{ steps.parse_cf_storage.outputs.RUNTIME }}
          project_id: ${{ env.PROJECTID }}
          entry_point: ${{ steps.parse_cf_storage.outputs.ENDPOINT }}
          timeout: ${{ steps.parse_cf_storage.outputs.TIMEOUT }}
          service_timeout: ${{ steps.parse_cf_storage.outputs.TIMEOUT }}
          source_dir: "src/${{ matrix.function.SrcFolder }}"
          ingress_settings: "ALLOW_ALL"  # Allow traffic from all  sources
          allow_unauthenticated: true   
          memory: ${{ steps.parse_cf_storage.outputs.MEMORY }}
          environment: "GEN_2"
          retry: false
          event_trigger_retry: false
          min_instances: ${{steps.parse_cf_storage.outputs.MIN_INSTANCE}}   # Ensures at least one instance is always running
          max_instances: ${{steps.parse_cf_storage.outputs.MAX_INSTANCE}} # Limits the maximum number of instances for concurrency control
          concurrency: 2
          gen: 2
          

  commitwrite:
    needs: detect-changes 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Git identity
        run: |
          git config --global user.email "vikask@contata.in"
          git config --global user.name "Vikas Kumar"
      - name: Get last commit details
        id: last_commit_write
        run: |
          LAST_COMMIT_WRITE=$(git rev-parse HEAD)
          echo "$LAST_COMMIT_WRITE" > ${{ github.workspace }}/Icf.txt
          echo "Last commit hash: $LAST_COMMIT_WRITE"
      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Automated commit by CI/CD"
          git push origin main
