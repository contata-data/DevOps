name: CI/CD
on:
  push:
    branches:
      - release_1
    paths:
      - "src/**"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-functions: ${{ steps.detect.outputs.changed-functions }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags 

      - name: get last commit details
        id: last_commit
        run: |
          LAST_COMMIT=$(cat ${{ github.workspace }}/Icf.txt)
          echo "last commit: $LAST_COMMIT"
          echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_OUTPUT

      - name: Get Last Merge Commit
        id: last_merge
        run: |
          LAST_MERGE=$(git log release_1 --merges -1 --format=%H)
          echo "Last merge commit : $LAST_MERGE"
          echo "LAST_MERGE=$LAST_MERGE" >> $GITHUB_OUTPUT

      - name: Get Previous Merge Commit
        id: prev_merge
        run: |
          PREV_MERGE=$(git log release_1 --merges -2 --format=%H | tail -n 1)
          echo "Previous merge commit: $PREV_MERGE"
          echo "PREV_MERGE=$PREV_MERGE" >> $GITHUB_OUTPUT
      - id: detect
        run: |
          CHANGED_FUNCTIONS=()
          git fetch origin release_1
          # get changed files
          echo "Previous merge commit: ${{ steps.prev_merge.outputs.PREV_MERGE }}"
          echo "Last merge commit: ${{ steps.last_merge.outputs.LAST_MERGE }}"
          echo "Last commit: ${{ steps.last_commit.outputs.LAST_COMMIT }}"
          CHANGED_FILES=CHANGED_FILES=$(git diff --name-only ${{ steps.last_commit.outputs.LAST_COMMIT }} release_1)
           
          #get changed dirs
          CHANGED_DIRS=$(for file in $CHANGED_FILES; do dirname $file; done | grep '^src/' | sort | uniq)
          echo "Directories: $CHANGED_DIRS"
          for DIR in $CHANGED_DIRS; do
              if [ "$DIR" = ".github" ] || [ "$DIR" = ".github/workflows" ]; then
                continue
              fi
              echo "Directory name: $DIR"
              FUNCTION_NAME=$(basename $DIR)
              echo "function name: $FUNCTION_NAME"
              # Split function name into parts
              IFS='_' read -r part1 part2 part3 <<< "$FUNCTION_NAME"
              echo "TriggerName: $part1"
              echo "FunName: $part2"
              echo "Trigger: $part3"
              # Assuming entry point can be derived from function name
              ENTRY_POINT="${FUNCTION_NAME}"
              CHANGED_FUNCTIONS+=("{\"name\": \"$part2\", \"entry_point\": \"$part2\", \"TriggerName\": \"$part1\", \"Trigger\": \"$part3\",\"SrcFolder\": \"$FUNCTION_NAME\"}")
          done
          if [ ${#CHANGED_FUNCTIONS[@]} -eq 0 ]; then
            echo "changed-functions=[]" >> $GITHUB_OUTPUT
          else
            CHANGED_FUNCTIONS_JSON=$(printf '[%s]' "$(IFS=,; echo "${CHANGED_FUNCTIONS[*]}")")
            echo "changed-functions=$CHANGED_FUNCTIONS_JSON" >> $GITHUB_OUTPUT
          fi
  deploy-staging:
    needs: detect-changes
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      id-token: write

    strategy:
      matrix:
        function: ${{ fromJson(needs.detect-changes.outputs.changed-functions) }}

    steps:
      - uses: actions/checkout@v4

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{vars.WORKLOAD_IDENTITY_PROVIDER_PROD}}
          service_account: ${{vars.SERVICE_ACCOUNT_PROD}}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECTID_PROD }}

      - name: Create Bucket
        if: matrix.function.Trigger == 'Storage'
        id: check_bucket
        run: |
          BUCKET_NAME="${{ matrix.function.TriggerName }}"
          PROJECT_Ids="${{ vars.PROJECTID_PROD }}"
          BUCKET_FULL_NAME="${PROJECT_Ids}-${BUCKET_NAME}"
          echo "BUCKET_FULL_NAME=$BUCKET_FULL_NAME" >> $GITHUB_OUTPUT
          echo "BUCKET_FULL_NAME : $BUCKET_FULL_NAME"
          ## Check bucket existence with exit  code handling
          #TRIGGER_DETAILS=$(cat ${{ github.workspace }}/src/${{ matrix.function.SrcFolder }}/Trigger.txt)
          #echo "trigger  details: $TRIGGER_DETAILS" 
          #echo "TRIGGER_DETAILS=$TRIGGER_DETAILS" >> $GITHUB_OUTPUT
          #if [ "${TRIGGER_DETAILS}" = "" ]; then
          #  echo "Bucket $BUCKET_FULL_NAME does not exists"
          #  echo "Creating bucket $BUCKET_FULL_NAME"
          #  gcloud storage buckets  create gs://$BUCKET_FULL_NAME \
          #      --project relevate-dev-403605 \
          #      --location us-central1
          #else
          #  echo "Bucket $BUCKET_FULL_NAME already exists "
          #fi
          
          if gsutil ls -b "gs://${BUCKET_FULL_NAME}"; then
            echo "Bucket - ${BUCKET_FULL_NAME} exists.line 124"
          else
            echo "Bucket $BUCKET_FULL_NAME does not exists line 126 "
            echo "Creating bucket - $BUCKET_FULL_NAME"
            gcloud storage buckets create gs://${BUCKET_FULL_NAME} \
                --project ${{ vars.PROJECTID_PROD }} \
                --location us-central1
          fi
          
      - name: Create Topic in Parallel
        if: matrix.function.Trigger == 'PubSub'
        id: create_topic
        run: |
          set -e  # Stop on errors
          trap 'echo "Error occurred while creating Pub/Sub topic: $TOPIC_NAME"' ERR  # Catch errors
          TOPIC_NAME=${{ matrix.function.TriggerName }}
          # Check if topic already exists
          if ! gcloud pubsub topics list --filter="name:projects/${{ vars.PROJECTID_PROD }}/topics/$TOPIC_NAME" | grep "$TOPIC_NAME"; then
            echo "Creating Pub/Sub topic: $TOPIC_NAME"
            # Attempt to create topic, ignore if already created by another process
            gcloud pubsub topics create $TOPIC_NAME || {
              # Check if the failure was because the topic already exists
              if gcloud pubsub topics list --filter="name:projects/${{ vars.PROJECTID_PROD }}/topics/$TOPIC_NAME" | grep "$TOPIC_NAME"; then
                echo "Topic: $TOPIC_NAME was already created by another process."
              else
                echo "Failed to create topic: $TOPIC_NAME due to unexpected error."
                exit 1
              fi
            }
          else
            echo "Topic: $TOPIC_NAME already exists, skipping creation."
          fi



     
      - name: Parse Cloud Function Storage Details
        id: parse_cf_storage
        run: |
          FILE="${{ github.workspace }}/src/${{ matrix.function.SrcFolder }}/config.txt"
          MEMORY=$(grep '^memory:' $FILE | cut -d':' -f2 | xargs)
          TIMEOUT=$(grep '^timeout:' $FILE | cut -d':' -f2 | xargs)
          RUNTIME=$(grep '^runtime:' $FILE | cut -d':' -f2 | xargs)
          ENDPOINT=$(grep '^endpoint:' $FILE | cut -d':' -f2 | xargs)
          CFNAME=$(grep '^cfname:' $FILE | cut -d':' -f2 | xargs)
          CPU=$(grep '^cpu:' $FILE | cut -d':' -f2 | xargs)
          echo "Memory: $MEMORY"
          echo "Timeout: $TIMEOUT"
          echo "Runtime: $RUNTIME"
          # Check and assign default values if variables are empty
          if [ -z "$MEMORY" ]; then
          MEMORY="256Mi"
          fi
          if [ -z "$TIMEOUT" ]; then
          TIMEOUT="30m"
          fi
          if [ -z "$RUNTIME" ]; then
          RUNTIME="python312"
          fi
          if [ -z "$ENDPOINT" ]; then
          ENDPOINT="${{ matrix.function.name }}"
          fi
          if [ -z "$CFNAME" ]; then
          CFNAME="${{ matrix.function.name }}"
          fi
          
          echo "Using Function Name: $${{ matrix.function.name }}"
          echo "Using Entry point: $${{ matrix.function.name }}"
          
          
          echo "Using Memory: $MEMORY"
          echo "Using Timeout: $TIMEOUT"
          echo "Using Runtime: $RUNTIME"
          echo "RUNTIME=$RUNTIME" >> $GITHUB_OUTPUT
          echo "TIMEOUT=$TIMEOUT" >> $GITHUB_OUTPUT
          
          echo "ENDPOINT=$ENDPOINT" >> $GITHUB_OUTPUT
          echo "CFNAME=$CFNAME" >> $GITHUB_OUTPUT
          
      - name: Debug Parsed Outputs
        run: |
                echo " Runtime1: ${{ steps.parse_cf_storage.outputs.RUNTIME }}"
                echo "Memory1: ${{ steps.parse_cf_storage.outputs.MEMORY }}"
                echo "Timeout1: ${{ steps.parse_cf_storage.outputs.TIMEOUT }}"
                echo "ENDPOINT: ${{ steps.parse_cf_storage.outputs.ENDPOINT }}"
                echo "CFNAME: ${{ steps.parse_cf_storage.outputs.CFNAME }}"

          
      - name: Deploy Cloud Function - Topic Trigger
        if: matrix.function.Trigger == 'PubSub'  
        uses: google-github-actions/deploy-cloud-functions@v3
        with:
          name: ${{ steps.parse_cf_storage.outputs.CFNAME }}
          runtime: ${{ steps.parse_cf_storage.outputs.RUNTIME }}
          project_id: ${{ env.PROJECTID_PROD }}
          entry_point: ${{ steps.parse_cf_storage.outputs.ENDPOINT }}
          event_trigger_type: "google.cloud.pubsub.topic.v1.messagePublished"
          event_trigger_resource: "projects/${{ vars.PROJECTID_PROD }}/topics/${{ matrix.function.TriggerName }}"
          event_trigger_pubsub_topic: "projects/${{ vars.PROJECTID_PROD }}/topics/${{ matrix.function.TriggerName }}"
          event_trigger_service: "pubsub.googleapis.com"
          timeout: ${{ steps.parse_cf_storage.outputs.TIMEOUT }}
          source_dir: "src/${{ matrix.function.SrcFolder }}"
          ingress_settings: "ALLOW_ALL"  # Allow traffic from all sources
          allow_unauthenticated: true  
          memory: ${{ steps.parse_cf_storage.outputs.MEMORY }}
          environment: "GEN_2"
          retry: false
 
      - name: Deploy Cloud Function - Storage Trigger
        if: matrix.function.Trigger == 'Storage'  
        uses: google-github-actions/deploy-cloud-functions@v3
        with:
          name: ${{ steps.parse_cf_storage.outputs.CFNAME }}
          runtime: ${{ steps.parse_cf_storage.outputs.RUNTIME }}
          project_id: ${{ env.PROJECTID_PROD }}
          entry_point: ${{ steps.parse_cf_storage.outputs.ENDPOINT }}
          event_trigger_type: "google.cloud.storage.object.v1.finalized"
          event_trigger_resource: "projects/${{ vars.PROJECTID_PROD }}/locations/us-central1/buckets/${{ steps.check_bucket.outputs.BUCKET_FULL_NAME }}"
          event_trigger_filters: |
             bucket=${{ steps.check_bucket.outputs.BUCKET_FULL_NAME }}
          timeout: ${{ steps.parse_cf_storage.outputs.TIMEOUT }}
          source_dir: "src/${{ matrix.function.SrcFolder }}"
          ingress_settings: "ALLOW_ALL"  # Allow traffic from all sources 
          allow_unauthenticated: true  
          memory: ${{ steps.parse_cf_storage.outputs.MEMORY }}
          environment: "GEN_2"
          retry: false 

      - name: Deploy Cloud Function - HTTP Trigger
        if: matrix.function.Trigger == 'HTTP'  
        uses: google-github-actions/deploy-cloud-functions@v3
        with:
          name: ${{ steps.parse_cf_storage.outputs.CFNAME }}
          runtime: ${{ steps.parse_cf_storage.outputs.RUNTIME }}
          project_id: ${{ env.PROJECTID_PROD }}
          entry_point: ${{ steps.parse_cf_storage.outputs.ENDPOINT }}
          timeout: ${{ steps.parse_cf_storage.outputs.TIMEOUT }}
          service_timeout: ${{ steps.parse_cf_storage.outputs.TIMEOUT }}
          source_dir: "src/${{ matrix.function.SrcFolder }}"
          ingress_settings: "ALLOW_ALL"  # Allow traffic from all  sources
          allow_unauthenticated: true   
          memory: ${{ steps.parse_cf_storage.outputs.MEMORY }}
          retry: false

  commitwrite:
    needs: detect-changes 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Git identity
        run: |
          git config --global user.email "vikask@contata.in"
          git config --global user.name "Vikas Kumar"
      - name: Get last commit details
        id: last_commit_write
        run: |
          LAST_COMMIT_WRITE=$(git rev-parse HEAD)
          echo "$LAST_COMMIT_WRITE" > ${{ github.workspace }}/Icf.txt
          echo "Last commit hash: $LAST_COMMIT_WRITE"
      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Automated commit by CI/CD"
          git push origin release_1