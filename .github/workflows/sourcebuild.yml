name: CI/CD
on:
  push:
    branches:
      - main
    paths:
      - "src/**"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-functions: ${{ steps.detect.outputs.changed-functions }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and  tags

      - name: get last commit details
        id: last_commit
        run: |
          LAST_COMMIT=$(cat ${{ github.workspace }}/Icf.txt)
          echo "last commit: $LAST_COMMIT"
          echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_OUTPUT

      - name: Get Last Merge Commit
        id: last_merge
        run: |
          LAST_MERGE=$(git log main --merges -1 --format=%H)
          echo "Last merge commit : $LAST_MERGE"
          echo "LAST_MERGE=$LAST_MERGE" >> $GITHUB_OUTPUT

      - name: Get Previous Merge Commit
        id: prev_merge
        run: |
          PREV_MERGE=$(git log main --merges -2 --format=%H | tail -n 1)
          echo "Previous merge commit: $PREV_MERGE"
          echo "PREV_MERGE=$PREV_MERGE" >> $GITHUB_OUTPUT
      - id: detect
        run: |
          CHANGED_FUNCTIONS=()
          git fetch origin main
          # get changed files
          echo "Previous merge commit: ${{ steps.prev_merge.outputs.PREV_MERGE }}"
          echo "Last merge commit: ${{ steps.last_merge.outputs.LAST_MERGE }}"
          echo "Last commit: ${{ steps.last_commit.outputs.LAST_COMMIT }}"
          CHANGED_FILES=CHANGED_FILES=$(git diff --name-only ${{ steps.last_commit.outputs.LAST_COMMIT }} main)
           
          #get changed dirs
          CHANGED_DIRS=$(for file in $CHANGED_FILES; do dirname $file; done | grep '^src/' | sort | uniq)
          echo "Directories: $CHANGED_DIRS"
          for DIR in $CHANGED_DIRS; do
              if [ "$DIR" = ".github" ] || [ "$DIR" = ".github/workflows" ]; then
                continue
              fi
              echo "Directory name: $DIR"
              FUNCTION_NAME=$(basename $DIR)
              echo "function name: $FUNCTION_NAME"
              # Split function name into parts
              IFS='_' read -r part1 part2 part3 <<< "$FUNCTION_NAME"
              echo "TriggerName: $part1"
              echo "FunName: $part2"
              echo "Trigger: $part3"
              # Assuming entry point can be derived from function name
              ENTRY_POINT="${FUNCTION_NAME}"
              CHANGED_FUNCTIONS+=("{\"name\": \"$part2\", \"entry_point\": \"$part2\", \"TriggerName\": \"$part1\", \"Trigger\": \"$part3\",\"SrcFolder\": \"$FUNCTION_NAME\"}")
          done
          if [ ${#CHANGED_FUNCTIONS[@]} -eq 0 ]; then
            echo "changed-functions=[]" >> $GITHUB_OUTPUT
          else
            CHANGED_FUNCTIONS_JSON=$(printf '[%s]' "$(IFS=,; echo "${CHANGED_FUNCTIONS[*]}")")
            echo "changed-functions=$CHANGED_FUNCTIONS_JSON" >> $GITHUB_OUTPUT
          fi
  deploy-staging:
    needs: detect-changes
    runs-on: ubuntu-latest
    environment: stag
    permissions:
      contents: read
      id-token: write

    strategy:
      matrix:
        function: ${{ fromJson(needs.detect-changes.outputs.changed-functions) }}

    steps:
      - uses: actions/checkout@v4

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{vars.WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{vars.SERVICE_ACCOUNT}}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECTID }}

      - name: Create Bucket
        if: matrix.function.Trigger == 'Storage'
        id: check_bucket
        run: |
          BUCKET_NAME="${{ matrix.function.TriggerName }}"
          PROJECT_Ids="${{ vars.PROJECTID }}"
          BUCKET_FULL_NAME="${PROJECT_Ids}-${BUCKET_NAME}"
          echo "BUCKET_FULL_NAME=$BUCKET_FULL_NAME" >> $GITHUB_OUTPUT
          echo "BUCKET_FULL_NAME : $BUCKET_FULL_NAME"
          ## Check bucket existence with exit  code handling
          #TRIGGER_DETAILS=$(cat ${{ github.workspace }}/src/${{ matrix.function.SrcFolder }}/Trigger.txt)
          #echo "trigger  details: $TRIGGER_DETAILS" 
          #echo "TRIGGER_DETAILS=$TRIGGER_DETAILS" >> $GITHUB_OUTPUT
          #if [ "${TRIGGER_DETAILS}" = "" ]; then
          #  echo "Bucket $BUCKET_FULL_NAME does not exists"
          #  echo "Creating bucket $BUCKET_FULL_NAME"
          #  gcloud storage buckets  create gs://$BUCKET_FULL_NAME \
          #      --project relevate-dev-403605 \
          #      --location us-central1
          #else
          #  echo "Bucket $BUCKET_FULL_NAME already exists "
          #fi
          
          if gsutil ls -b "gs://${BUCKET_FULL_NAME}"; then
            echo "Bucket - ${BUCKET_FULL_NAME} exists.line 124"
          else
            echo "Bucket $BUCKET_FULL_NAME does not exists line 126 "
            echo "Creating bucket - $BUCKET_FULL_NAME"
            gcloud storage buckets create gs://${BUCKET_FULL_NAME} \
                --project ${{ vars.PROJECTID }} \
                --location us-central1
          fi
          
      - name: Create Topic
        if: matrix.function.Trigger == 'PubSub'
        id: create_topic
        run: |
          TOPIC_NAME=${{ matrix.function.TriggerName }}
          if ! gcloud pubsub topics  list --filter="name:projects/${{ vars.PROJECTID }}/topics/$TOPIC_NAME" | grep "$TOPIC_NAME"; then
            # Create topic if it doesn't exist
            gcloud pubsub topics create $TOPIC_NAME
            echo "Created topic: $TOPIC_NAME"
          else
            echo "Topic: $TOPIC_NAME already  exists"
          fi

      - name: Deploy Cloud Function - Topic Trigger
        if: matrix.function.Trigger == 'PubSub'
        uses: google-github-actions/deploy-cloud-functions@v3
        with:
          name: ${{ matrix.function.name }}
          runtime: "python312"
          project_id: ${{ env.PROJECTID }}
          entry_point: ${{ matrix.function.entry_point }}
          event_trigger_type: "google.cloud.pubsub.topic.v1.messagePublished"
          event_trigger_resource: "projects/${{ vars.PROJECTID }}/topics/${{ matrix.function.TriggerName }}"
          event_trigger_pubsub_topic: "projects/${{ vars.PROJECTID }}/topics/${{ matrix.function.TriggerName }}"
          event_trigger_service: "pubsub.googleapis.com"
          timeout: "10m"
          source_dir: "src/${{ matrix.function.SrcFolder }}"

      - name: Deploy Cloud Function - Storage Trigger
        if: matrix.function.Trigger == 'Storage'
        uses: google-github-actions/deploy-cloud-functions@v3
        with:
          name: ${{ matrix.function.name }}
          runtime: "python312"
          project_id: ${{ env.PROJECTID }}
          entry_point: ${{ matrix.function.entry_point }}
          event_trigger_type: "google.cloud.storage.object.v1.finalized"
          event_trigger_resource: "projects/${{ vars.PROJECTID }}/locations/us-central1/buckets/${{ steps.check_bucket.outputs.BUCKET_FULL_NAME }}"
          event_trigger_filters: |
             bucket=${{ steps.check_bucket.outputs.BUCKET_FULL_NAME }}
          timeout: "10m"
          source_dir: "src/${{ matrix.function.SrcFolder }}"

      - name: Deploy API Gateway
        if: matrix.function.Trigger == 'HTTP'
        run: |
          API_NAME=${{ matrix.function.name }}
          CONFIG_NAME=${API_NAME}-config
          PROJECT_ID=${{ vars.PROJECTID }}
          REGION=us-central1
          
          # Print variable values
          echo "PROJECT_ID: $PROJECT_ID"
          echo "REGION: $REGION"
          echo "API_NAME: $API_NAME"
          FULL_API_NAME="projects/${PROJECT_ID}/locations/${REGION}/apis/${API_NAME}"
          # Check if the API exists
          API_EXISTS=$(gcloud api-gateway apis list --format="value(name)" --project=${{ vars.PROJECTID }})
          if [[ $API_EXISTS != *"$API_NAME"* ]]; then
            echo "Creating new API for $API_NAME"
            echo "Creating new API  for ${{ matrix.function.name }}"
            gcloud api-gateway apis create ${{ matrix.function.name }} --display-name="${{ matrix.function.name }}" --project=${{ vars.PROJECTID }}
          else
            echo "API $API_NAME already exists"
          fi
          # Create or update the API configuration
          CONFIG_ID=$(gcloud api-gateway api-configs list --api=$API_NAME --format="value(name)" --project=${{ vars.PROJECTID }})
          if [[ $CONFIG_ID != *"$CONFIG_NAME"* ]]; then
            echo "Creating new API Gateway configuration for $API_NAME"
            gcloud api-gateway api-configs create $CONFIG_NAME --api=$API_NAME --openapi-spec=src/${{ matrix.function.SrcFolder }}/dev-ops-config-a.yaml --project=${{ vars.PROJECTID }}
          else
            echo "Updating existing API Gateway configuration for $API_NAME"
            gcloud api-gateway api-configs update $CONFIG_NAME --api=$API_NAME --openapi-spec=src/${{ matrix.function.SrcFolder }}/dev-ops-config-a.yaml --project=${{ vars.PROJECTID }}
          fi
          # Deploy the API Gateway
          GATEWAY_NAME=${API_NAME}-gateway
          GATEWAY_EXISTS=$(gcloud api-gateway gateways list --format="value(name)" --project=${{ vars.PROJECTID }} --location=$REGION)
          if [[ $GATEWAY_EXISTS != *"$GATEWAY_NAME"* ]]; then
            echo "Creating API Gateway $GATEWAY_NAME"
            gcloud api-gateway gateways create $GATEWAY_NAME --api=$API_NAME --api-config=$CONFIG_NAME --location=$REGION --project=${{ vars.PROJECTID }}
          else
            echo "Updating API Gateway $GATEWAY_NAME"
            gcloud api-gateway gateways update $GATEWAY_NAME --api=$API_NAME --api-config=$CONFIG_NAME --location=$REGION --project=${{ vars.PROJECTID }}
          fi

      - name: Deploy Cloud Function - HTTP Trigger
        if: matrix.function.Trigger == 'HTTP'
        uses: google-github-actions/deploy-cloud-functions@v3
        with:
          name: ${{ matrix.function.name }}
          runtime: "python312"
          project_id: ${{ env.PROJECTID }}
          entry_point: ${{ matrix.function.entry_point }}
          timeout: "10m"
          source_dir: "src/${{ matrix.function.SrcFolder }}"


  commitwrite:
    needs: detect-changes 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Git identity
        run: |
          git config --global user.email "vikask@contata.in"
          git config --global user.name "Vikas Kumar"
      - name: Get last commit details
        id: last_commit_write
        run: |
          LAST_COMMIT_WRITE=$(git rev-parse HEAD)
          echo "$LAST_COMMIT_WRITE" > ${{ github.workspace }}/Icf.txt
          echo "Last commit  hash: $LAST_COMMIT_WRITE"
      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Automated commit by CI/CD"
          git push origin main
